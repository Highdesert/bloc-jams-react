import React, { Component } from "react";import albumData from "./../data/albums";import PlayerBar from "./PlayerBar";import { Table } from 'reactstrap';class Album extends Component {	 constructor(props) {		  super(props);		  const album = albumData.find(album => {				return album.slug === this.props.match.params.slug;		  });		  this.state = {				album: album,				currentSong: album.songs[0],				currentTime: 0,				duration: album.songs[0].duration,				isPlaying: false,				volume: 1,				currentVolume: 0.5		  };		  this.audioElement = document.createElement("audio");		  this.audioElement.src = album.songs[0].audioSrc;	 }	 play() {		  this.audioElement.play();		  this.setState({ isPlaying: true });	 }	 pause() {		  this.audioElement.pause();		  this.setState({ isPlaying: false });	 }	 setSong(song) {		  this.audioElement.src = song.audioSrc;		  this.setState({ currentSong: song });	 }	 handleSongClick(song) {		  const isSameSong = this.state.currentSong === song;		  if (this.state.isPlaying && isSameSong) {				this.pause();		  } else {				if (!isSameSong) {					 this.setSong(song);				}				this.play();		  }	 }	handlePrevClick() {		  const currentIndex = this.state.album.songs.findIndex(				song => this.state.currentSong === song		  );		  const newIndex = Math.max(0, currentIndex - 1);		  const newSong = this.state.album.songs[newIndex];		  this.setSong(newSong);		  this.play();	 }	handleNextClick() {		  const currentIndex = this.state.album.songs.findIndex(				song => this.state.currentSong === song);		  const newIndex = Math.min(this.state.album.songs.length - 1, currentIndex + 1);		  const newSong = this.state.album.songs[newIndex];		  this.setSong(newSong);		  this.play();	 }	handleTimeChange(e) {		  const newTime = this.audioElement.duration * e.target.value;		  this.audioElement.currentTime = newTime;		  this.setState({ currentTime: newTime });	 }		componentDidMount() {		  this.eventListeners = {				timeupdate: e => {					 this.setState({ currentTime: this.audioElement.currentTime });				},				durationchange: e => {					 this.setState({ duration: this.audioElement.duration });				},				volumechange: e => {					 this.setState({ currentVolume: this.audioElement.currentVolume });				}		  };		  this.audioElement.addEventListener('timeupdate', this.eventListeners.timeupdate);		  this.audioElement.addEventListener('durationchange', this.eventListeners.duration);		  this.audioElement.addEventListener('volumechange', this.eventListeners.volume);	 }	 componentWillUnmount() {		  this.audioElement.src = null;		  this.audioElement.removeEventListener('timeupdate', this.eventListeners.timeupdate);		  this.audioElement.removeEventListener('durationchange', this.eventListeners.durationchange);		  this.audioElement.removeEventListener('volumechange', this.eventListeners.volume);	 }	 mouseHover(song) {		  this.setState({ isMouseOver: song });	 }	 mouseLeave() {		  this.setState({ isMouseOver: null });	 }	 songButton(song, index) {		  if (this.state.currentSong === song && this.state.isPlaying) {				return <span className="ion-pause" />;		  } else if (this.state.isMouseOver === song) {				return <span className="ion-play" />;		  } else {				return index + 1;		  }	 }	 handleVolumeChange(e) {		  const newVolume = e.target.value;		  this.audioElement.volume = newVolume;		  this.setState({ volume: newVolume });	 }	 	 formatTime(time) {		  const min = Math.trunc(time / 60)		  const sec = Math.trunc(time % 60)		  if (sec < 10) {				return `${min}:0${sec}`		  } else {				return `${min}:${sec}`		  }	 }		render() {		  return (				<section className="album-col">					<section id="album.info">						<div className="col">							<img id="album-cover-art"							src={this.state.album.albumCover}							alt={this.state.album.title}							/>						</div>						<div className="album-details">						<h1 id="album-title">{this.state.album.title}</h1>						<h2 className="artist">{this.state.album.artists}</h2>						<div id="release-info">							{this.state.album.realseInfo}						</div>					</div>				</section>				<Table responsive>					 <table id="song-list" align="center" className="table table-hover table-boardered table-striped">						<colgroup>							<col id="song-number-column" />							<col id="song-title-column" />							<col id="song-duration-column" />						</colgroup>			 	  	 <tbody>				 				{								this.state.album.songs.map((song, index) => (								<tr className="song"								key={index}								onClick={() => this.handleSongClick(song)}>								<td onMouseEnter={() => this.mouseHover(song)}									onMouseLeave={() => this.mouseLeave()}								>									{this.songButton(song, index)}								</td>								<td>{song.title}</td>								<td>{this.formatTime(song.duration)}</td>							</tr>						))}					</tbody>				</table>					<PlayerBar					isPlaying={this.state.isPlaying}					currentSong={this.state.currentSong}					currentTime={this.audioElement.currentTime}					duration={this.audioElement.duration}					handleSongClick={() => this.handleSongClick(this.state.currentSong)}					handlePrevClick={() => this.handlePrevClick()}					handleNextClick={() => this.handleNextClick()}					handleTimeChange={(e) => this.handleTimeChange(e)}					handleVolumeChange={(e) => this.handleVolumeChange(e)}					formatTime={(e) => this.formatTime(this.state.currentTime)}					/>			</Table>		</section>		  			);		}	}export default Album;